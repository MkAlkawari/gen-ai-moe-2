Description: This stack includes resources needed to deploy AWS CDK apps into
  this environment
Parameters:
  TrustedAccounts:
    Description: List of AWS accounts that are trusted to publish assets and deploy
      stacks to this environment
    Default: ''
    Type: CommaDelimitedList
  TrustedAccountsForLookup:
    Description: List of AWS accounts that are trusted to look up values in this environment
    Default: ''
    Type: CommaDelimitedList
  CloudFormationExecutionPolicies:
    Description: List of the ManagedPolicy ARN(s) to attach to the CloudFormation
      deployment role
    Default: ''
    Type: CommaDelimitedList
  FileAssetsBucketName:
    Description: The name of the S3 bucket used for file assets
    Default: ''
    Type: String
  FileAssetsBucketKmsKeyId:
    Description: Empty to create a new key (default), 'AWS_MANAGED_KEY' to use a
      managed S3 key, or the ID/ARN of an existing key.
    Default: ''
    Type: String
  ContainerAssetsRepositoryName:
    Description: A user-provided custom name to use for the container assets ECR repository
    Default: ''
    Type: String
  Qualifier:
    Description: An identifier to distinguish multiple bootstrap stacks in the same
      environment
    Default: hnb659fds
    Type: String
    AllowedPattern: '[A-Za-z0-9_-]{1,10}'
    ConstraintDescription: Qualifier must be an alphanumeric identifier of at most 10 characters
  PublicAccessBlockConfiguration:
    Description: Whether or not to enable S3 Staging Bucket Public Access Block
      Configuration
    Default: 'true'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
  InputPermissionsBoundary:
    Description: Whether or not to use either the CDK supplied or custom permissions
      boundary
    Default: ''
    Type: String
  UseExamplePermissionsBoundary:
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Type: String
  BootstrapVariant:
    Type: String
    Default: 'AWS CDK: Default Resources'
    Description: Describe the provenance of the resources in this bootstrap stack.
      Change this when you customize the template. To prevent accidents, the CDK
      CLI will not overwrite bootstrap stacks with a different variant.
Conditions:
  HasTrustedAccounts: !Not
    - !Equals
      - ''
      - !Join
        - ''
        - !Ref TrustedAccounts
  HasTrustedAccountsForLookup: !Not
    - !Equals
      - ''
      - !Join
        - ''
        - !Ref TrustedAccountsForLookup
  HasCloudFormationExecutionPolicies: !Not
    - !Equals
      - ''
      - !Join
        - ''
        - !Ref CloudFormationExecutionPolicies
  HasCustomFileAssetsBucketName: !Not
    - !Equals
      - ''
      - !Ref FileAssetsBucketName
  CreateNewKey: !Equals
    - ''
    - !Ref FileAssetsBucketKmsKeyId
  UseAwsManagedKey: !Equals
    - AWS_MANAGED_KEY
    - !Ref FileAssetsBucketKmsKeyId
  ShouldCreatePermissionsBoundary: !Equals
    - 'true'
    - !Ref UseExamplePermissionsBoundary
  PermissionsBoundarySet: !Not
    - !Equals
      - ''
      - !Ref InputPermissionsBoundary
  HasCustomContainerAssetsRepositoryName: !Not
    - !Equals
      - ''
      - !Ref ContainerAssetsRepositoryName
  UsePublicAccessBlockConfiguration: !Equals
    - 'true'
    - !Ref PublicAccessBlockConfiguration
Resources:
  FileAssetsBucketEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: '*'
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: '*'
            Resource: '*'
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService:
                  - !Sub s3.${AWS::Region}.amazonaws.com
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: !Sub ${FilePublishingRole.Arn}
            Resource: '*'
    Condition: CreateNewKey
  FileAssetsBucketEncryptionKeyAlias:
    Condition: CreateNewKey
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/cdk-${Qualifier}-assets-key
      TargetKeyId: !Ref FileAssetsBucketEncryptionKey
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - HasCustomFileAssetsBucketName
        - !Sub ${FileAssetsBucketName}
        - !Sub cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !If
                - CreateNewKey
                - !Sub ${FileAssetsBucketEncryptionKey.Arn}
                - !If
                  - UseAwsManagedKey
                  - !Ref AWS::NoValue
                  - !Sub ${FileAssetsBucketKmsKeyId}
      PublicAccessBlockConfiguration: !If
        - UsePublicAccessBlockConfiguration
        - BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        - !Ref AWS::NoValue
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: CleanupOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 30
          - Id: AbortIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  StagingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StagingBucket
      PolicyDocument:
        Id: AccessControl
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub ${StagingBucket.Arn}
              - !Sub ${StagingBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
            Principal: '*'
  ContainerAssetsRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageTagMutability: IMMUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Untagged images should not exist, but expire any older than one year",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 365
                },
                "action": { "type": "expire" }
              }
            ]
          }
      RepositoryName: !If
        - HasCustomContainerAssetsRepositoryName
        - !Sub ${ContainerAssetsRepositoryName}
        - !Sub cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Sid: LambdaECRImageRetrievalPolicy
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Condition:
              StringLike:
                aws:sourceArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
  FilePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:TagSession
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
          - !If
            - HasTrustedAccounts
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                AWS: !Ref TrustedAccounts
            - !Ref AWS::NoValue
      RoleName: !Sub cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: file-publishing
  ImagePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:TagSession
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
          - !If
            - HasTrustedAccounts
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                AWS: !Ref TrustedAccounts
            - !Ref AWS::NoValue
      RoleName: !Sub cdk-${Qualifier}-image-publishing-role-${AWS::AccountId}-${AWS::Region}
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: image-publishing
  LookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:TagSession
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
          - !If
            - HasTrustedAccountsForLookup
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                AWS: !Ref TrustedAccountsForLookup
            - !Ref AWS::NoValue
          - !If
            - HasTrustedAccounts
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                AWS: !Ref TrustedAccounts
            - !Ref AWS::NoValue
      RoleName: !Sub cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: DontReadSecrets
                Effect: Deny
                Action:
                  - kms:Decrypt
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: LookupRolePolicy
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: lookup
  FilePublishingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:GetEncryptionConfiguration
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - !Sub ${StagingBucket.Arn}
              - !Sub ${StagingBucket.Arn}/*
            Condition:
              StringEquals:
                aws:ResourceAccount:
                  - !Sub ${AWS::AccountId}
            Effect: Allow
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource: !If
              - CreateNewKey
              - !Sub ${FileAssetsBucketEncryptionKey.Arn}
              - !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${FileAssetsBucketKmsKeyId}
        Version: '2012-10-17'
      Roles:
        - !Ref FilePublishingRole
      PolicyName: !Sub cdk-${Qualifier}-file-publishing-role-default-policy-${AWS::AccountId}-${AWS::Region}
  ImagePublishingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:BatchCheckLayerAvailability
              - ecr:DescribeRepositories
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource: !Sub ${ContainerAssetsRepository.Arn}
            Effect: Allow
          - Action:
              - ecr:GetAuthorizationToken
            Resource: '*'
            Effect: Allow
        Version: '2012-10-17'
      Roles:
        - !Ref ImagePublishingRole
      PolicyName: !Sub cdk-${Qualifier}-image-publishing-role-default-policy-${AWS::AccountId}-${AWS::Region}
  DeploymentActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:TagSession
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
          - !If
            - HasTrustedAccounts
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                AWS: !Ref TrustedAccounts
            - !Ref AWS::NoValue
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: CloudFormationPermissions
                Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:RollbackStack
                  - cloudformation:ContinueUpdateRollback
                Resource: '*'
              - Sid: PipelineCrossAccountArtifactsBucket
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:Abort*
                  - s3:DeleteObject*
                  - s3:PutObject*
                Resource: '*'
                Condition:
                  StringNotEquals:
                    s3:ResourceAccount: !Ref AWS::AccountId
              - Sid: PipelineCrossAccountArtifactsKey
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                Resource: '*'
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub s3.${AWS::Region}.amazonaws.com
              - Action: iam:PassRole
                Resource: !Sub ${CloudFormationExecutionRole.Arn}
                Effect: Allow
              - Sid: CliPermissions
                Action:
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplate
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateTerminationProtection
                  - sts:GetCallerIdentity
                  - cloudformation:GetTemplateSummary
                Resource: '*'
                Effect: Allow
              - Sid: CliStagingBucket
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                Resource:
                  - !Sub ${StagingBucket.Arn}
                  - !Sub ${StagingBucket.Arn}/*
              - Sid: ReadVersion
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CdkBootstrapVersion}
            Version: '2012-10-17'
          PolicyName: default
      RoleName: !Sub cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: deploy
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns: !If
        - HasCloudFormationExecutionPolicies
        - !Ref CloudFormationExecutionPolicies
        - !If
          - HasTrustedAccounts
          - !Ref AWS::NoValue
          - - !Sub arn:${AWS::Partition}:iam::aws:policy/Cdk_Least 
      RoleName: !Sub cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: !If
        - PermissionsBoundarySet
        - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${InputPermissionsBoundary}
        - !Ref AWS::NoValue
  CdkBoostrapPermissionsBoundaryPolicy:
    Condition: ShouldCreatePermissionsBoundary
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: ExplicitAllowAll
            Action:
              - '*'
            Effect: Allow
            Resource: '*'
          - Sid: DenyAccessIfRequiredPermBoundaryIsNotBeingApplied
            Action:
              - iam:CreateUser
              - iam:CreateRole
              - iam:PutRolePermissionsBoundary
              - iam:PutUserPermissionsBoundary
            Condition:
              StringNotEquals:
                iam:PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/cdk-${Qualifier}-permissions-boundary-${AWS::AccountId}-${AWS::Region}
            Effect: Deny
            Resource: '*'
          - Sid: DenyPermBoundaryIAMPolicyAlteration
            Action:
              - iam:CreatePolicyVersion
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:SetDefaultPolicyVersion
            Effect: Deny
            Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/cdk-${Qualifier}-permissions-boundary-${AWS::AccountId}-${AWS::Region}
          - Sid: DenyRemovalOfPermBoundaryFromAnyUserOrRole
            Action:
              - iam:DeleteUserPermissionsBoundary
              - iam:DeleteRolePermissionsBoundary
            Effect: Deny
            Resource: '*'
        Version: '2012-10-17'
      Description: Bootstrap Permission Boundary
      ManagedPolicyName: !Sub cdk-${Qualifier}-permissions-boundary-${AWS::AccountId}-${AWS::Region}
      Path: /
  CdkBootstrapVersion:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub /cdk-bootstrap/${Qualifier}/version
      Value: '25'
Outputs:
  BucketName:
    Description: The name of the S3 bucket owned by the CDK toolkit stack
    Value: !Sub ${StagingBucket}
  BucketDomainName:
    Description: The domain name of the S3 bucket owned by the CDK toolkit stack
    Value: !Sub ${StagingBucket.RegionalDomainName}
  FileAssetKeyArn:
    Description: The ARN of the KMS key used to encrypt the asset bucket (deprecated)
    Value: !If
      - CreateNewKey
      - !Sub ${FileAssetsBucketEncryptionKey.Arn}
      - !Sub ${FileAssetsBucketKmsKeyId}
    Export:
      Name: !Sub CdkBootstrap-${Qualifier}-FileAssetKeyArn
  ImageRepositoryName:
    Description: The name of the ECR repository which hosts docker image assets
    Value: !Sub ${ContainerAssetsRepository}
  BootstrapVersion:
    Description: The version of the bootstrap resources that are currently mastered
      in this stack
    Value: !GetAtt CdkBootstrapVersion.Value